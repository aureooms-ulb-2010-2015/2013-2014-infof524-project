model "mcndp-read"
	uses "mmxprs"

	(! parameters !)

	parameters
		DATA = ""                            ! input file name, if "" read from stdin
	end-parameters


	(! variables !)

	declarations

		j, i, f, u, n : integer              ! temporary variables
		k, c, b, d, m: integer

		N, M, K : integer                    ! instance size variables
		Nr, Kr : range                       ! instance size ranges

		F : array(Nr, Nr) of integer         ! fixed cost of edges
		Y : array(Nr, Nr) of mpvar           ! decision variables for edges

		C : array(Kr, Nr, Nr) of integer     ! flow variable costs
		X : array(Kr, Nr, Nr) of mpvar       ! decision variables for flows

		D : array(Kr, Nr) of integer         ! supply / demand variables
		U : array(Nr, Nr) of integer         ! capacity of edges
		B : array(Kr, Nr, Nr) of integer     ! upper bound for flow of product k on edge (i,j)

	end-declarations


	(! data !)

	fopen(DATA, F_INPUT)

		(! parse instance size !)

		fskipline("\n")                             ! skip blank lines
		readln(N, M, K)                             ! read N, M and K
		writeln(N, " ", M, " ", K)

		Nr := 1..N                                  ! assign N range
		Kr := 1..K                                  ! assign K range

		finalize(Nr)                                ! finalize array size
		finalize(Kr)                                ! idem

		m := M                                      ! init edge counter

		repeat                                      ! for each edge
			fskipline("\n")                             ! skip blank lines
			readln(j, i, f, u, n)                       ! read j, i, f_{i,j}, u_{i,j}, n
			F(i, j) := f
			U(i, j) := u
			create(Y(i, j))
			writeln(j, " ", i, " ", f, " ", u, " ", n)

			repeat                                      ! for each product
				fskipline("\n")                             ! skip blank lines
				readln(k, c, b)                             ! read k, c^k_{i,j}, b^k_{i,j}
				C(k, i, j) := c
				B(k, i, j) := b
				create(X(k, i, j))
				writeln(k, " ", c, " ", b)
				n -= 1
			until n = 0

			m -= 1
		until m = 0

		repeat                                      ! for each supply / demand constraint
			fskipline("\n")                             ! skip blank lines
			readln(k, i, d)                             ! read k, i, d^k_i

			if getparam("nbread") = 0 then break        ! EOF
			end-if

			D(k, i) := d
			writeln(k, " ", i, " ", d)
		until 1 = 0


	fclose(F_INPUT)




end-model
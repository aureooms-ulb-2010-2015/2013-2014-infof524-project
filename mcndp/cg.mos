model "mcndp/raw"
	uses "mmxprs"

	(! parameters !)

	parameters
		DATA = ""                            ! input file name, if "" read from stdin
	end-parameters


	include "mcndp/lib/parse.mos"
	include "sp/lib/sp.mos"

	declarations
		Pr    : range                            ! Path range
		DELTA : array(Pr, Kr, Nr, Nr) of integer ! Tells if path P contains arc (i,j)
		FLOW  : array(Pr, Kr) of mpvar           ! Flow decision variables
	end-declarations


	(! generate base !)

	! ...


	(! objective !)

	TotalCost :=
		sum (i in Nr, j in Nr | exists(Y(i, j))) (F(i, j) * Y(i, j)) +
		sum (i in Nr, j in Nr, k in Kr, p in Pr | exists(X(k, i, j))) (C(k, i, j) * DELTA(p, k, i, j) * FLOW(p, k))
		


	(! constraints !)

	! Link

		forall(i in Nr, j in Nr | exists(Y(i, j)), k in Kr, p in Pr)
			Y(i,j) = DELTA(p, k, i, j)

		forall(i in Nr, j in Nr, k in Kr | exists(X(k, i, j)), p in Pr)
			X(k,i,j) = DELTA(p, k, i, j) * FLOW(p, k)

	! Flows

		forall (k in Kr)
		sum (p in Pr) FLOW(p, k) = sum(i in Nr) D(k, i)


	! Capacity

		forall (i in Nr, j in Nr | exists(Y(i, j)))
		sum (k in Kr, p in Pr) DELTA(p, k, i, j) * FLOW(p, k) <= U(i,j) * Y(i,j)


	! Bound

		forall (i in Nr, j in Nr, k in Kr | exists(X(k, i, j)), p in Pr)
		DELTA(p, k, i, j) * FLOW(p, k) <= B(k,i,j) * Y(i,j)


	! Quantities

		forall (i in Nr, j in Nr, k in Kr | exists(X(k, i, j)))
		X(k, i, j) >= 0


	! Open

		forall (i in Nr, j in Nr | exists(Y(i, j)))
		Y(i, j) is_binary


	(! solve !)

	minimize(TotalCost)

	
	(! output !)

	include "mcndp/lib/output.mos"


end-model
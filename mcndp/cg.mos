model "mcndp/raw"
	uses "mmxprs"

	(! parameters !)

	parameters
		DATA = ""                            ! input file name, if "" read from stdin
	end-parameters


	include "mcndp/lib/parse-cg.mos"
	include "sp/lib/sp.mos"

	declarations
		l     : integer                          ! # of generated paths per product
		Pr    : range                            ! Path range
		DELTA : array(Kr, Pr, Mr) of integer     ! Tells if path P contains arc _m_
		FLOW  : array(Kr, Pr) of mpvar           ! Flow decision variables
	end-declarations

	l  := 1
	Pr := 1..l

	(! generate base !)

		forall(k in Kr) do
			create(FLOW(k, l))                   ! Create flow variable
			DELTA(k, l, M + k) := 1              ! Basic paths use dummy arcs
		end-do

	(! objective !)

	TotalCost :=
		sum (m in Mr) (F(m) * Y(m)) +
		sum (m in Mr, k in Kr, p in Pr | exists(X(k, m))) (C(k, m) * DELTA(k, p, m) * FLOW(k, p))
		


	(! constraints !)

	! Link

		forall(m in Mr, k in Kr | exists(X(k, m)), p in Pr)
			X(k, m) = DELTA(k, p, m) * FLOW(k, p)

	! Flows

		forall (k in Kr)
		sum (p in Pr) FLOW(k, p) = D(k)


	! Capacity

		forall (m in Mr)
		sum (k in Kr, p in Pr) DELTA(k, p, m) * FLOW(k, p) <= U(m) * Y(m)


	! Bound

		forall (m in Mr, k in Kr | exists(X(k, m)), p in Pr)
		DELTA(k, p, m) * FLOW(k, p) <= B(k, m) * Y(m)


	! Quantities

		forall (m in Mr, k in Kr | exists(X(k, m)))
		X(k, m) >= 0


	! Open

		forall (m in Mr | exists(Y(m)))
		Y(m) is_binary


	(! solve !)

	minimize(TotalCost)

	
	(! output !)

	include "mcndp/lib/output-cg.mos"


end-model
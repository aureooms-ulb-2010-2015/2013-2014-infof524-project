
(! variables !)

declarations

	_j, _i, _f, _u, _n : integer         ! temporary variables
	_k, _c, _b, _d, _m: integer

	N, M, K : integer                    ! instance size variables
	Nr, Kr : range                       ! instance size ranges

	F : array(Nr, Nr) of integer         ! fixed cost of edges
	Y : array(Nr, Nr) of mpvar           ! decision variables for edges

	C : array(Kr, Nr, Nr) of integer     ! flow variable costs
	X : array(Kr, Nr, Nr) of mpvar       ! decision variables for flows

	D : array(Kr, Nr) of integer         ! supply / demand variables
	U : array(Nr, Nr) of integer         ! capacity of edges
	B : array(Kr, Nr, Nr) of integer     ! upper bound for flow of product k on edge (i,j)

end-declarations


(! data !)

fopen(DATA, F_INPUT)

	(! parse instance size !)

	fskipline("\n")                             ! skip blank lines
	readln(N, M, K)                             ! read N, M and K
	!writeln(N, " ", M, " ", K)

	Nr := 1..N                                  ! assign N range
	Kr := 1..K                                  ! assign K range


	! /!\ left in comments because doesn't seem
	!     to lead to faster execution
	! finalize(Nr)                                ! finalize array size
	! finalize(Kr)                                ! idem

	_m := M                                     ! init edge counter

	repeat                                      ! for each edge
		fskipline("\n")                             ! skip blank lines
		readln(_j, _i, _f, _u, _n)                  ! read j, i, f_{i,j}, u_{i,j}, n
		F(_i, _j) := _f
		U(_i, _j) := _u
		create(Y(_i, _j))
		!writeln(_j, " ", _i, " ", _f, " ", _u, " ", _n)

		repeat                                      ! for each product
			fskipline("\n")                             ! skip blank lines
			readln(_k, _c, _b)                          ! read k, c^k_{i,j}, b^k_{i,j}
			C(_k, _i, _j) := _c
			B(_k, _i, _j) := _b
			create(X(_k, _i, _j))
			!writeln(_k, " ", _c, " ", _b)
			_n -= 1
		until _n = 0

		_m -= 1
	until _m = 0

	repeat                                      ! for each supply / demand constraint
		fskipline("\n")                             ! skip blank lines
		readln(_k, _i, _d)                          ! read k, i, d^k_i

		if getparam("nbread") = 0 then break        ! EOF
		end-if

		D(_k, _i) := _d
		!writeln(_k, " ", _i, " ", _d)
	until 1 = 0


fclose(F_INPUT)